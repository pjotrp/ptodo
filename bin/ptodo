#! /usr/bin/ruby
#
# Author:: Pjotr Prins
# Copyright:: July 2007
# License:: Ruby License

rootpath = File.dirname(File.dirname(__FILE__))
$: << rootpath+'/lib' 

require 'optparse'
require 'ostruct'
require 'util/other/version'
require 'todo/todos'
require 'todo/todoconfig'
require 'todo/todoterm'

PTODO_VERSION = 'ptodo '+Version.get(File.dirname(__FILE__),'VERSION')+' by Pjotr Prins'

options = OpenStruct.new()
opts = OptionParser.new() { |opts|
  opts.on_tail("-h", "--help", "Show help and examples") {
    print(opts)
    print <<EXAMPLE

Examples:

		ptodo later               ; print all items with tags named 'later'
		ptodo later math          ; print all items with tags 'later' and 'math'
		ptodo '(later|math)'      ; print all items with tags 'later' or 'math'
		ptodo (math200\d)         ; print all math items with tags like math2007
    ptodo --dated             ; print all dated items
    ptodo --due               ; print all due items (2 weeks ahead)
    ptodo --remind| remind -c -       ; pipe into remind program

EXAMPLE

    exit()
  }
  
  opts.on('-f filename',String,"Read from file (default from config)") do | s |
    options.filename = s
  end

  opts.on("--tags", "Show all tags") do |t|
    options.showtags = t
  end

  opts.on("--line", "Show line info") do |l|
    options.line = l
  end

  opts.on("--no-color", "No colours") do |c|
    options.no_color = !c
  end

  opts.on("--due", "List all due items") do |d|
    options.due = d
  end

  opts.on("-d","--dated", "List all dated items") do |d|
    options.dated = d
  end

  opts.on("--remind", "Generate output for remind") do |r|
    options.remind = r
		options.no_color = true
		options.quiet = true
  end

  opts.on("-q", "--quiet", "Run quietly") do |q|
    options.quiet = q
  end

  opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
    options.verbose = v
  end

  opts.on("-t", "--[no-]trace", "Debug") do |t|
    options.trace = t
  end

}
opts.parse!(ARGV)

options.color = (options.no_color == nil)

terminal = TodoTerm.new(options.color)
terminal.blue
print PTODO_VERSION,"\n" if not options.quiet
terminal.normal

# if ARGV.size == 0 and not (options.showtags or options.remind or options.dated)
#	print(opts)
# end

ARGV.push 'soon' if ARGV.size == 0 and not options.due

config = TodoConfig.new

infiles = []
if options.filename
	infiles.push options.filename
else
	infiles = config['todos']
end

todos = Todos.new

exit if infiles == nil

infiles.each do | fn |
	line = 0
	File.new(fn).each_line do | s |
		line += 1
		todos.add(s,line,fn)
	end
end

if options.showtags
	todos.print_tags
elsif options.remind
	todos.print_remind(options)
else
	todos.print_filtered(ARGV,options)
end
