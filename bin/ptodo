#! /usr/bin/env ruby
#
# Author:: Pjotr Prins
# Copyright:: March 2009
# License:: Ruby License

rootpath = File.dirname(File.dirname(__FILE__))
$: << rootpath+'/lib' << rootpath+'/lib/ruby'

require 'optparse'
require 'ostruct'
require 'util/other/version'
require 'todo/todos'
require 'todo/todoconfig'
require 'todo/todoterm'
require 'todo/newtodos'

PTODO_VERSION = 'ptodo '+Version.get(File.dirname(__FILE__),'VERSION')+' by Pjotr Prins (2007-2017)'

options = OpenStruct.new()
opts = OptionParser.new() { |opts|
  opts.on_tail("-h", "--help", "Show help and examples") {
    print(opts)
    print <<EXAMPLE

Examples:

    ptodo soon                ; print all non-tagged items
    ptodo later               ; print all items with tags named 'later'
    ptodo later math          ; print all items with tags 'later' and 'math'
    ptodo '(later|math)'      ; print all items with tags 'later' or 'math'
    ptodo (math200\\d)         ; print all math items with tags like math2007
    ptodo --dated             ; print all dated items
    ptodo --due               ; print all due items (2 weeks ahead) [default]
    ptodo --remind| remind -c -       ; pipe into remind program

    ptodo -a date [tags] -m "description"
    ex: ptodo -a tomorrow [joe] -m "dinner with joe"

For a full description see http://ptodo.rubyforge.org/

EXAMPLE

    exit()
  }

  opts.on('-f filename',String,"Read from file (default from config)") do | s |
    options.filename = s
  end

  opts.on("--tags", "Show all tags") do |t|
    options.showtags = t
  end

  opts.on("-l", "--line", "Show line info") do |l|
    options.line = l
  end

  opts.on("--no-color", "No colours") do |c|
    options.no_color = !c
  end

  opts.on("--due", "List all due items") do |d|
    options.due = d
  end

  opts.on("-d","--dated", "List all dated items") do |d|
    options.dated = d
  end

  opts.on("--remind", "Generate output for remind") do |r|
    options.remind = r
    options.no_color = true
    options.quiet = true
  end

  opts.on("-q", "--quiet", "Run quietly") do |q|
    options.quiet = q
  end

  opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
    options.verbose = v
  end

  opts.on("-t", "--[no-]trace", "Trace") do |t|
    options.trace = t
  end

  opts.on("-d", "--[no-]debug", "Debug") do |t|
    $debug = t
    $stderr.puts "DEBUG MODE"
  end

  opts.on('-a date [tags] -m "msg"', "Add item to Todo list") do |t|
    options.add = true
#     puts ARGV
    add_args = t + " "
    puts ARGV[0]
    ARGV.each do |arg|
#       puts "arg: " + arg
      if arg == '-m'
        add_args += '"'
      else
        add_args += arg+" "
      end
    end
      puts add_args
      add_args = add_args[0..-2]
      puts add_args
      add_args += '"'
      puts add_args
    options.add_args = add_args
  end

  opts.on("-m")


}
opts.parse!(ARGV)

options.color = (options.no_color == nil)

terminal = TodoTerm.new(options.color)
terminal.blue
print PTODO_VERSION,"\n" if not options.quiet
terminal.normal

# if ARGV.size == 0 and not (options.showtags or options.remind or options.dated)
#  print(opts)
# end

options.due = true if ARGV.size == 0

config = TodoConfig.new

infiles = []
if options.filename
  infiles.push options.filename
else
  infiles.push config['todos']
end


exit if infiles == nil
arguments = ARGV

if options.add
  newtodos = Newtodos.new(options.add_args)
  newtodos.add_to_file(infiles)
  arguments = '' # to show the todo list anyway
end

todos = Todos.new

in_source=false
infiles.each do | fn |
  raise Exception.new("File #{fn} does not exist") if !File.exist?(fn)
  $stderr.print "Reading #{fn}...\n" if options.verbose
  line = 0
  begin
    # File.new(fn,:encoding => "r:utf-8").each_line do | s |
    File.new(fn,"r:ISO-8859-1:UTF-8").each_line do | s |
      if s =~ /\#\+BEGIN/i
        in_source = true
      end
      if s =~ /\#\+END_(SRC)/i
        in_source = false
      end
      line += 1
      next if in_source
      todos.add(s,line,fn)
    end
  rescue
    $stderr.print "Does your Ruby version support UTF-8? #{RUBY_VERSION} default #{Encoding.default_external}- try --debug\n"
    $stderr.puts("Reading: "+fn) if $debug
    File.new(fn,"r:ISO-8859-1:UTF-8").each_line do | s |
      line += 1
      todos.add(s,line,fn)
    end
  end
end


if options.showtags
  todos.print_tags
elsif options.remind
  todos.print_remind(options)
else
  todos.print_filtered(arguments,options)
end
